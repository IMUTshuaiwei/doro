"""
[#name = typehint]

This script generates type hints for the configuration files in the project.
It reads JSON files from the 'resources/config' directory and generates
Python TypedDict classes with appropriate type hints.
The generated type hints are saved in the 'src/auto_typehint' directory.
"""

import os
import json
from typing import Any, Dict, Final, List, Union

TYPING_HEAD: Final[
    str
] = """\
from __future__ import annotations
from typing import Literal, TypedDict
"""

class_name_list: List[str] = []
literal_name_list: List[str] = []
new_class_list: List[str] = []
class_literals: List[str] = []
class_value_literals: List[str] = []


def format_name(name: str) -> str:
    return name


def generate_typeddict(
    class_name: str,
    class_dict: Dict[str, Union[Dict[str, Any], Any]],
    *,
    __init: bool = True,
) -> str:
    global new_class_list, class_literals, class_name_list, literal_name_list, class_value_literals
    if __init:
        class_name_list.clear()
        literal_name_list.clear()
        new_class_list.clear()
        class_literals.clear()
        class_value_literals.clear()
    formatted_class_name = format_name(class_name)
    typeddict: str = f"class {formatted_class_name}Param(TypedDict):\n"
    class_name_list.append(f"{formatted_class_name}Param")
    literal_values = ", ".join(f'"{k}"' for k in class_dict.keys())
    class_literals.append(f"{formatted_class_name}Literal = Literal[{literal_values}]")
    literal_name_list.append(f"{formatted_class_name}Literal")
    child_class_names: List[str] = []
    for key, value in class_dict.items():
        if isinstance(value, dict):
            formatted_child_param = format_name(key)
            typeddict += f"    {formatted_child_param}: {formatted_child_param}Param\n"
            child_class_names.append(f"{formatted_child_param}Param")
            generate_typeddict(class_name=key, class_dict=value, __init=False)  # type: ignore
        elif isinstance(value, str):
            typeddict += f"    {key}: str\n"
        else:
            typeddict += f"    {key}: {type(value).__name__}\n"

    if child_class_names:
        class_literals.append(
            f"{formatted_class_name}ParamLiteral = Literal[{', '.join(child_class_names)}]"
        )

    new_class_list.append(typeddict)

    total_typeddict: str = "\n\n".join(new_class_list)
    total_literal: str = (
        "\n".join(class_literals) + "\n\n" + "\n".join(class_value_literals)
    )

    return total_typeddict + "\n\n" + total_literal + "\n"


def load_gif() -> Dict[str, Any]:
    gif_dir = "resources/doro"
    gif_data: Dict[str, Any] = {}

    for root, dirs, files in os.walk(gif_dir):
        rel_root = os.path.relpath(root, gif_dir)
        current = gif_data
        if rel_root != ".":
            for part in rel_root.split(os.sep):
                current = current.setdefault(part, {})
        for d in dirs:
            current.setdefault(d, {})
        for f in files:
            file_name = f.split(".")[0]
            file_ext = os.path.splitext(f)[1]
            current[file_name] = file_ext
    return gif_data


def load_music() -> Dict[str, Any]:
    music_dir = "resources/music"
    music_data: Dict[str, Any] = {}

    for root, dirs, files in os.walk(music_dir):
        rel_root = os.path.relpath(root, music_dir)
        current = music_data
        if rel_root != ".":
            for part in rel_root.split(os.sep):
                current = current.setdefault(part, {})
        for d in dirs:
            current.setdefault(d, {})
        for f in files:
            file_name = f.split(".")[0]
            file_ext = os.path.splitext(f)[1]
            current[file_name] = file_ext
    return music_data


def load_config() -> Dict[str, Any]:
    with open("resources/config/default_config.json", "r", encoding="utf-8") as f:
        config_json = json.load(f)
        return config_json


def load_file_index() -> Dict[str, Any]:
    with open("resources/config/file_index.json", "r", encoding="utf-8") as f:
        file_index_json = json.load(f)
        return file_index_json


def load_theme() -> Dict[str, Any]:
    with open("resources/config/theme.json", "r", encoding="utf-8") as f:
        theme_json = json.load(f)
        return theme_json


def write_to(file_path: str, head: str, data: str) -> None:
    data = (
        "# This file is auto-generated by build/generate_typehints.py\n" + head + data
    )

    with open(file_path, "w", encoding="utf-8") as f:
        f.write(data)


def generate() -> None:
    cfg_output = generate_typeddict("Config", load_config())
    file_index_output = generate_typeddict("FileIndex", load_file_index())
    theme_output = generate_typeddict("Theme", load_theme())
    gif_output = generate_typeddict("GifDir", load_gif())
    music_output = generate_typeddict("MusicDir", load_music())

    total = {
        "ConfigHint": cfg_output,
        "FileIndexHint": file_index_output,
        "ThemeHint": theme_output,
        "GifHint": gif_output,
        "MusicHint": music_output,
    }

    package_head: str = ""
    for name, content in total.items():
        package_head += f"from . import {name}\n"
        write_to(f"src/auto_typehint/{name}.py", TYPING_HEAD, content)

    package_head += "__all__ = [\n"
    for name in total.keys():
        package_head += f"    '{name}',\n"
    package_head += "]\n"

    write_to("src/auto_typehint/__init__.py", package_head, "")


if __name__ == "__main__":
    generate()
    # print(load_resource())
